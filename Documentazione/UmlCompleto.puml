@startuml
skinparam groupInheritance 3
'si potrebbe mettere Cliente in "AddettoPrenotazione"

'PACKAGE
class Main
package "Model" #DDDDDD{
package "Alimentari"{}
package "Attori" {}
package "Produzione" {}
class Tempo
}
package "Controller" #DDDDDD{
class Visualizzazione
class Creazione
}
package "Utility" #DDDDDD{
class InputDati
class MyMenu
class LetturaFileXML
class Costanti
}
package "Alimentari" #EEEEEE{
class Alimento
class Bevanda
class Extra
class Ingrediente
}
package "Attori" #EEEEEE{
package "Gestore"{}
package "AddettoPrenotazione"{}
package "Magazziniere"{}
class Persona
class Cliente
}
package "Gestore" <<node>>{
class Gestore
class Ristorante
}
package "AddettoPrenotazione" <<node>>{
class AddettoPrenotazione
class Prenotazione
}
package "Magazziniere" <<node>>{
class Magazziniere
class Magazzino
}

package "Produzione" #EEEEEE {
package "Menu"{}
interface Prenotabile
class Piatto
class Ricetta
}
package "Menu" #DDDDDD {
class Menu
class MenuCarta
class MenuTematico
}

'ASSOCIAZIONI
Gestore <-down Ristorante
Ristorante "1" <-- "1" AddettoPrenotazione
Ristorante "1" <-- "1" Magazziniere
AddettoPrenotazione "1" <--* "0..N" Prenotazione
AddettoPrenotazione "1" <-- "1..N" Menu
Prenotazione "1" <-- "1" Cliente
Prenotazione "1" <-- "1..N" Prenotabile
Prenotazione "1" <-- "1..N" Alimento
Menu "1" <-- "1..N" Piatto
Piatto "1" <-- "1" Ricetta
Ricetta "1" <-- "1..N" Alimento
Magazziniere "1" <-- "1" Magazzino
Magazzino "1" <-- "1..N" Alimento

'IMPAGINAZIONE
"Model" --[hidden]right-> "Utility"
"Model" --[hidden]right-> "Controller"
"Attori" --[hidden]right-> Main
"Utility" --[hidden]down-> "Controller"
"Utility" --[hidden]down-> Main
"Controller" --[hidden]down> Main
Cliente --[hidden]down-> "AddettoPrenotazione"
"Produzione" --[hidden]up-> "Alimentari"

'CLASSI
abstract class Alimento {
-nome : String
-qta : float
-misura : String
..Costruttori..
+Alimento(nome : String, qta : float, misura : String)
+Alimento()
..Getters&Setters..
+getNome() : String
+getQta() : float
+getMisura() : String
+setNome(nome : String)
+setQta(qta : float)
+setMisura(misura : String)
}

class Bevanda extends Alimento {
-{static}CONS_PROCAPITE
+Bevanda(nome : String, qta : float, misura : String, cons_procapite : float)
+getConsProcapite() : float
}

class Extra extends Alimento{
-{static}CONS_PROCAPITE
+Extra(nome : String, qta : float, misura : String, cons_procapite : float)
+getConsProcapite() : float
}

class Ingrediente extends Alimento{
+Ingrediente(nome : String, qta : float, misura : String)
+Ingrediente()
}


class LetturaFileXML {
+leggiRistorante(filename : String) : Ristorante
-creaAlimento(xmlreader : XMLStreamReader, tipologia : String) : Alimento
-creaDisponibilita(xmlreader : XMLStreamReader) : ArrayList<LocalDate>
}

class Main{
+{static} main(args : String[])
-{static} benvenuto()
-{static} nominaGestore() : String
-{static} modificaDatiIniziali(gestore : Gestore)
-{static}scegliFunzionalitaGestore(scelta : int, gestore : Gestore)
-{static}scegliFunzionalitaTemporali(scelta : int, data_attuale : Tempo, gestore : Gestore)
-{static}gestisciData(gestore : Gestore, data_attuale : LocalDate) : LocalDate
-{static}inserisciPrenotazione(gestore : Gestore, data_attuale : LocalDate)
-{static}inizializzazione(gestore : Gestore)
}

abstract class Menu{
-piatti_menu : ArrayList<Piatto>
+getPiatti_menu() : ArrayList<Piatto>
+setPiatti_menu(piatti_menu : ArrayList<Piatto>)
+aggiungiPiatto(piatto : Piatto)
+getPiatto(nome_piatto : String) : Piatto
}

class MenuCarta extends Menu{
+MenuCarta(piatti_menu : ArrayList<Piatto>)
}

class MenuTematico extends Menu implements Prenotabile{
-nome : String
-lavoro_menu : float
-disponibilità : ArrayList<LocalDate>
+MenuTematico(nome : String, lavoro_menu : float, disponibilità : ArrayList<LocalDate>, piatti_menu : ArrayList<Piatto>)
+getNome() : String
+setNome(nome : String)
+getLavoro_menu() : float
+setLavoro_menu(lavoro_menu : float)
+getDisponibilità() : ArrayList<LocalDate>
+aggiungiDisponibilita(periodo : ArrayList<LocalDate>)
}

class Magazzino{
-bevande : ArrayList<Alimento>
-extras : ArrayList<Alimento>
-ingredienti : ArrayList<Alimento>
+Magazzino(bevande : ArrayList<Alimento>, extras : ArrayList<Alimento>, ingredienti : ArrayList<Alimento>)
+getBevande() : ArrayList<Alimento>
+setBevande(bevande : ArrayList<Alimento>)
+getExtras() : ArrayList<Alimento>
+setExtras(extras : ArrayList<Alimento>)
+getIngredienti() : ArrayList<Alimento>
+setIngredienti(ingredienti : ArrayList<Alimento>)
+getAlimento(nome_alimento : String) : Alimento
+setQtaAlimento(alimento : Alimento)
+prelevaAlimento(nome : String, qta : float)
+inseisciAlimento(alimento : Alimento) : String
+controllaSeDuplicato(alimento : Alimento) : String

}

interface Prenotabile #aliceblue ##[dotted]blue{
getNome() : String
getDisponibilita() : ArrayList<LocalDate>
}

class Piatto implements Prenotabile{
-nome : String
-disponibilità : ArrayList<LocalDate>
-lavoro_piatto : float
-ricetta : Ricetta
+Piatto(nome : String, disponibilità : ArrayList<LocalDate>, lavoro_piatto : float, ricetta : Ricetta)
+getNome() : String
+setNome(nome : String)
+getDisponibilità() : ArrayList<LocalDate>
+setDisponibilità(disponibilità : ArrayList<LocalDate>)
+getLavoro_piatto() : float
+setLavoro_piatto(lavoro_piatto : float)
+getRicetta() : Ricetta
+setRicetta(ricetta : Ricetta)
+aggiungiDisponibilita(disponibilita : LocalDate)
}

class Prenotazione {
-nominativo : Cliente
-n_coperti : int
-data : LocalDate
-scelte : HashMap<Prenotabile, Integer>
-cons_bevande : HashMap<Alimento, Float>
-cons_extra : HashMap<Alimento, Float>
+Prenotazione(nominativo : Cliente, n_coperti : int, data : LocalDate, scelte : HashMap<Prenotabile, Integer>, cons_bevande : HashMap<Alimento, Float>, cons_extra : HashMap<Alimento, Float>)
+Prenotazione(scelte : HashMap<Prenotabile, Integer>, cons_bevande : HashMap<Alimento, Float>, cons_extra : HashMap<Alimento, Float>)
+getN_coperti() : int
+getData() : LocalDate
+setData(data : LocalDate)
+getScelte() : HashMap<Prenotabile, Integer>
+getCons_bevande() : HashMap<Alimento, Float>
+getCons_extra() : HashMap<Alimento, Float>
+getLavoro_prenotazione() : float
}

class Ricetta{
-ingredienti : HashMap<Alimento, Float>
-n_porzioni : int
-lavoro_porzione : float
+Ricetta(ingredienti : HashMap<Alimento, Float>, n_porzioni : int, lavoro_porzione : float)
+Ricetta()
+getIngredienti() : HashMap<Alimento, Float>
+setIngredienti(ingredienti : HashMap<Alimento, Float>)
+getN_porzioni() : int
+setN_porzioni(n_porzioni : int)
+getLavoro_porzione() : float
+setLavoro_porzione(lavoro_porzione : float)
}

class Ristorante{
-n_posti : int
-lavoro_persona : int
-addettoPrenotazione : AddettoPrenotazione
-magazziniere : Magazziniere
+Ristorante(n_posti : int, lavoro_persona : int, addettoPrenotazione : AddettoPrenotazione, magazziniere : Magazziniere)
+getN_posti() : int
+setN_posti(n_posti : int)
+getLavoro_persona() : int
+setLavoro_persona(lavoro_persona : int)
+getAddettoPrenotazione() : AddettoPrenotazione
+getMagazziniere() : Magazziniere
}

class Tempo{
-{static} data_corrente : LocalDate
+Tempo(data_corrente : LocalDate)
+getData_corrente() : LocalDate
+setData_corrente(data_corrente : LocalDate)
+scorriGiorno()
+{static}data1AnticipaData2(data1 : LocalDate, data2 : LocalDate) : boolean
+{static}parsaData(data : String) : LocalDate
}

abstract class Persona  {
-nome : String
+Persona(String nome)
+getNome() : String
+setNome(String nome)
}

class Cliente extends Persona{
+Cliente(String nome)
}

class Gestore extends Persona {
-ristorante : Ristorante
-risOk() : boolean
+Gestore(nome : String, ristorante : Ristorante)
+getRistorante() : Ristorante
+inizializzaRistorante() : String
+comunica (data_attuale : LocalDate) : String
}

class Magazziniere extends Persona {
-magazzino : Magazzino
-lista_spesa : ArrayList<Alimento>
-magOk() : boolean
+Magazziniere(nome : String, magazzino : Magazzino, lista_spesa : ArrayList<Alimento>)
+getMagazzino() : Magazzino
+calcolaConsumoBevande(n_persone : int) : HashMap<Alimento, Float>
+calcolaConsumoExtras(n_persone : int) : HashMap<Alimento, Float>
+creaListaSpesa(prenotazione_totale : Prenotazione)
-valutaQtaIngredientiPiatto(piatto : Piatto, qta_richiesta_piatto : int)
+aggiungiSpesaInMagazzino()
+portaInCucina(prenotazione_complessiva : Prenotazione)
+calcolaPiattiPrenotazione(prenotazione_totale : Prenotazione) : HashMap<Piatto, Integer>
}

class AddettoPrenotazione extends Persona{
-prenotazioni : ArrayList<Prenotazione>
-menu : ArrayList<Prenotabile>
+AddettoPrenotazione(nome : String, prenotazioni : ArrayList<Prenotazione>, menu : ArrayList<Prenotabile>)
+getPrenotazioni() : ArrayList<Prenotazione>
+getMenu() : ArrayList<Prenotabile>
+setMenu(ArrayList<Prenotabile> menu)
+aggiungiMenu_carta(menu_carta : Menu)
+aggiungiMenu_tematico(menu_tematico : MenuTematico)
+rimuoviPrenotazioniVecchie(data_attuale : LocalDate)
+calcolaMenuDelGiorno(data_attuale : LocalDate) :ArrayList<Prenotabile>
+controlloDataPrenotazione(data_attuale : LocalDate, stringa_data_prenotazione : String, posti_ristorante : int) : int
+calcolaPostiOccupati(data_prenotazione : LocalDate) : int
+stimaPostiRimanenti(data_prenotazione : LocalDate, lavoro_persona : int, n_posti : int) : int
+validaCaricoLavoro(data_prenotazione : LocalDate, lavoro_persona : int, n_posti : int, possibile_prenotazione : Prenotazione) : boolean
+unisciPrenotazioni(prenotazioni_in_corso : ArrayList<Prenotazione>) : Prenotazione
+filtraPrenotazioniPerData(data : LocalDate) : ArrayList<Prenotazione>
+controllaMenu(lavoro_persona : int) : String
+controllaRicette(lavoro_persona : int): String
-piattoDisponibileInData(piatto : Piatto, inizio : LocalDate, fine : LocalDate) : boolean
-disponibilitaPiattiCorrette(menu_tematico : MenuTematico) : boolean
}

class MyMenu{
-{static} CORNICE_ANGOLO_SX_SUP : String
-{static} CORNICE_ANGOLO_DX_SUP : String
-{static} CORNICE_ANGOLO_SX_INF : String
-{static} CORNICE_ANGOLO_DX_INF : String
-{static} CORNICE_CONTORNO_ORIZZ : String
-{static} CORNICE_CONTORNO_VERT : String
-{static} FRECCETTA : String
-{static} VOCE_USCITA : String
-{static} RICHIESTA_INSERIMENTO : String
-titolo : String
-voci : String[]
-lunghezza_cornice_orizz : int
+MyMenu(titolo : String, voci : String[])
+scegliConUscita() : int
+scegliSenzaUscita() : int
+stampaMenuConUscita()
+stampaMenuSenzaUscita()
-generaCorniceSenzaAngolo() : String
-generaRigaCentrale() : String
-generaVoce(voce : String) : String
}
class Visualizzazione{
 +{static}stampaMenuDelGiorno(gestore : Gestore, data : LocalDate) : boolean
 +{static}stampaScelte(scelte : HashMap<Prenotabile, Integer>)
 +{static}mostraConsumoProcapite(alimenti : ArrayList<Alimento>)
 +{static}mostraAlimenti(alimenti : ArrayList<Alimento>)
 +{static}mostraCaricoLavoroPersona(gestore : Gestore)
 +{static}mostraPostiDisponibili(gestore : Gestore)
 +{static}mostraMenuTematici(menu : ArrayList<Prenotabile>)
 +{static}mostraPiatti(menu : ArrayList<Prenotabile>)
 +{static}mostraRicette(menu : ArrayList<Prenotabile>)
 +{static}ripulisciConsole()
 }
class Creazione{
 -{static}creaPrenotabile(nome : String) : Prenotabile
 +{static}creaAlimento(tipo : String) : Alimento
 +{static}creaMenuTematico(gestore : Gestore)
 +{static}creaPiatto(gestore : Gestore)
 +{static}creaMenuTestuale(funzione : String) : MyMenu
 }

class InputDati{
-{static} ERRORE_FORMATO : String
-{static} ERRORE_MINIMO : String
-{static} ERRORE_STRINGA_VUOTA : String
-{static} ERRORE_MASSIMO : String
-{static} ERRORE_MINIMO_MASSIMO : String
-{static} MESSAGGIO_AMMISSIBILI : String
-{static} RISPOSTA_SI : char
-{static} RISPOSTA_NO : char
+{static} creaScanner() : Scanner
+{static} leggiStringa(messaggio : String) : String
+{static} leggiStringaConSpazio(messaggio : String) : String
+{static} leggiStringaNonVuota(messaggio : String) : String
+{static} leggiChar(messaggio : String) : char
+{static} leggiUpperChar(messaggio : String, ammissibili : String) : char
+{static} leggiIntero(messaggio : String) : int
+{static} leggiInteroConMinimoMassimo(messaggio : String, min : int, max : int) : int
+{static} leggiInteroConMinimo(messaggio : String, minimo : int) : int
+{static} leggiIntero(messaggio : String, minimo : int, massimo : int) : int
+{static} leggiDouble(messaggio : String) : double
+{static} leggiDoubleConMinimo(messaggio : String, minimo : double) : double
+{static} yesOrNo(messaggio : String) : boolean
+{static} premerePerContinuare() : void
}

class Costanti{
..Path..
+{static}FILE_RISTORANTE : String
..Valori ristorante..
+{static}IMPREVISTI_CUCINA : float
+{static}ALIMENTI_SCARTATI : float
+{static}MINIMO_INGRED_PER_RICETTA : int
+{static}MINIMO_PIATTI_PER_MENU : int
..Stringhe..
+{static}TEMPO: String
+{static}ATTORI : String
+{static}UTENTE : String
+{static}GESTORE: String
+{static}ADDETTO_PRENOTAZIONE: String
+{static}MAGAZZINIERE: String
+{static}RISTORANTE: String
+{static}MAGAZZINO: String
+{static}INGREDIENTE: String
+{static}EXTRA: String
+{static}BEVANDA: String
+{static}RICETTA: String
+{static}PIATTO: String
+{static}MENU_TEMATICO: String
+{static}PORTATA: String
+{static}NOME: String
+{static}QTA: String
+{static}MISURA: String
+{static}LAVORO_PERSONE: String
+{static}CONS_PROCAPITE: String
+{static}INIZIO: String
+{static}FINE: String
+{static}LAVORO_MENU: String
+{static}N_PORZIONI: String
+{static}LAVORO_PORZIONE: String
+{static}DISPONIBILITA: String
+{static}DISPONIBILITA_MENU: String
+{static}N_POSTI: String
+{static}AGGIUNT_MAGAZZINO: String
+{static}INS_LAVORO_PERSONA: String
+{static}INS_CONS_PROCAPITE: String
+{static}INS_DATA_INIZIO: String
+{static}INS_DATA_FINE: String
+{static}INS_DATA: String
+{static}INS_NOME: String
+{static}INS_QTA: String
+{static}INS_MISURA: String
+{static}INS_LAVORO : String
+{static}FUNZIONALITA: String
+{static}USCITA_MENU: String
+{static}END: String
+{static}INIZIALIZZAZIONE : String
+{static}UGUALE_ATTUALE : String
+{static}DATA_NON_VALIDA : String
+{static}GESTORE_NON_NULLO : String
+{static}M_SINGOLARE : String
+{static}F_SINGOLARE : String
+{static}M_PLURALE : String
+{static}F_PLURALE : String
+{static}INIZIO_FILE : String
+{static}FINE_FILE : String
+{static}LETTURA : String
+{static}SCRITTURA : String
+{static}ERRORE_INIZIALIZZAZIONE_READER : String
+{static}ERRORE_LETTURA_FILE : String
+{static}CORNICE_SUP : String
+{static}BENVENUTO : String
+{static}CORNICE_INF : String
}
@enduml